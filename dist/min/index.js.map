{"version":3,"file":"index.js","sources":["../../src/mixins.ts","../../src/queue/QueueAbstract.ts","../../src/queue/Queue.ts","../../src/index.ts","../../src/queue/QueueParallel.ts","../../src/queue/QueuePriority.ts"],"sourcesContent":["const mixins = {\n    /**\n     * Debounce method\n     * - Delays function execution until `wait` milliseconds have passed since the last call.\n     * - The last result is returned to all functions\n     *\n     * @param {Function} func - Function to execute\n     * @param {number} wait - Delay time in milliseconds\n     * @param {boolean} onlyOne - Returns result only to the executed function (If false - to all)\n     * @return {Function} Wrapped function with debounce\n     */\n    debounce(func, wait, onlyOne = true) {\n        let timeout = undefined;\n        const resolves = [];\n        return function (...args) {\n            return new Promise((resolve) => {\n                if (onlyOne) {\n                    resolves[0] = resolve;\n                }\n                else {\n                    resolves.push(resolve);\n                }\n                clearTimeout(timeout);\n                timeout = setTimeout(() => {\n                    timeout = undefined;\n                    const result = func(...args);\n                    Promise.resolve(result).then((res) => {\n                        resolves.forEach((r) => r(res));\n                        resolves.length = 0;\n                    });\n                }, wait);\n            });\n        };\n    },\n    /**\n     * onceAtATime method - Execute function only in one instance\n     * @param {Function} func - Function to execute\n     * @param {any} rejectOnce - Error response while function is running\n     * @returns {Function} Wrapped function with onceAtATime\n     */\n    onceAtATime(func, rejectOnce = new Error('Function is already running')) {\n        let isRunning = false;\n        return async function (...args) {\n            if (isRunning) {\n                return Promise.reject(rejectOnce);\n            }\n            isRunning = true;\n            try {\n                return await func(...args);\n            }\n            finally {\n                isRunning = false;\n            }\n        };\n    },\n    /**\n     * Throttle method\n     * - Limits the number of function calls to one per specified time interval.\n     *\n     * @param {Function} func - Target function to be limited.\n     * @param {number} limit - Time interval in milliseconds during which the function can be called only once.\n     * @returns {Function} Wrapped function with throttling.\n     */\n    throttle(func, limit) {\n        let lastCall = 0;\n        return function (...args) {\n            const now = Date.now();\n            if (now - lastCall >= limit) {\n                lastCall = now;\n                try {\n                    func(...args);\n                }\n                catch (error) {\n                    console.error('Throttled function error:', error);\n                }\n            }\n        };\n    },\n};\nexport default mixins;\n","export default class AQueue {\n    constructor() {\n        this.activeCount = 0;\n        this.concurrency = 1;\n    }\n    _canRunProcess() {\n        return this.activeCount < this.concurrency;\n    }\n    async _runProcess(queue) {\n        const { task, resolve, reject } = queue;\n        this.activeCount++;\n        try {\n            const result = await task();\n            resolve(result);\n        }\n        catch (e) {\n            reject(e);\n        }\n        finally {\n            this.activeCount--;\n            this._processQueue();\n        }\n    }\n    _processQueue() {\n        // Wait for all synchronous tasks to be added before processing\n        Promise.resolve().then(() => {\n            // Process as many tasks as concurrency allows\n            while (this._canRunProcess()) {\n                const queue = this._getQueue();\n                if (!queue) {\n                    break;\n                }\n                this._runProcess(queue);\n            }\n        });\n    }\n    getActiveCount() {\n        return this.activeCount;\n    }\n}\n","import AQueue from \"./QueueAbstract\";\nclass Queue extends AQueue {\n    constructor() {\n        super();\n        this.queues = [];\n    }\n    _getQueue() {\n        return this.queues.shift();\n    }\n    add(task) {\n        return new Promise((resolve, reject) => {\n            this.queues.push({ task, resolve, reject });\n            this._processQueue();\n        });\n    }\n    clear() {\n        this.queues.length = 0;\n    }\n    size() {\n        return this.queues.length;\n    }\n}\nexport default Queue;\n","import mixins from './mixins';\n// Queue\nimport QueueParallel from './queue/QueueParallel';\nimport QueuePriority from './queue/QueuePriority';\nimport Queue from './queue/Queue';\nexport default { mixins, Queue, QueueParallel, QueuePriority };\n","import Queue from \"./Queue\";\nclass QueueParallel extends Queue {\n    constructor(concurrency = 2) {\n        super();\n        this.concurrency = concurrency;\n    }\n}\nexport default QueueParallel;\n","import AQueue from \"./QueueAbstract\";\nclass QueuePriority extends AQueue {\n    constructor() {\n        super(...arguments);\n        this.queues = {\n            high: [],\n            normal: [],\n            low: [],\n        };\n    }\n    _getQueue() {\n        if (this.queues.high.length) {\n            return this.queues.high.shift();\n        }\n        if (this.queues.normal.length) {\n            return this.queues.normal.shift();\n        }\n        if (this.queues.low.length) {\n            return this.queues.low.shift();\n        }\n        return undefined;\n    }\n    add(task, priority = \"normal\") {\n        return new Promise((resolve, reject) => {\n            if (!(priority in this.queues)) {\n                console.error(`Invalid priority: ${priority}`);\n                priority = 'normal';\n            }\n            this.queues[priority].push({ task, resolve, reject });\n            this._processQueue();\n        });\n    }\n    clear(priority) {\n        if (priority) {\n            this.queues[priority].length = 0;\n            return;\n        }\n        this.queues.high.length = 0;\n        this.queues.normal.length = 0;\n        this.queues.low.length = 0;\n        return;\n    }\n    size(priority) {\n        if (priority) {\n            return this.queues[priority].length;\n        }\n        return this.queues.high.length + this.queues.normal.length + this.queues.low.length;\n    }\n}\nexport default QueuePriority;\n"],"names":["mixins","debounce","func","wait","onlyOne","timeout","resolves","args","Promise","resolve","push","clearTimeout","setTimeout","undefined","result","then","res","forEach","r","length","onceAtATime","rejectOnce","Error","isRunning","async","reject","throttle","limit","lastCall","now","Date","error","console","AQueue","constructor","this","activeCount","concurrency","_canRunProcess","_runProcess","queue","task","e","_processQueue","_getQueue","getActiveCount","Queue","super","queues","shift","add","clear","size","index","QueueParallel","QueuePriority","arguments","high","normal","low","priority"],"mappings":"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"}